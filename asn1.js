/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var asn1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4,6],$V2=[1,16],$V3=[1,17],$V4=[6,13,22],$V5=[1,23],$V6=[27,62],$V7=[2,68],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,34],$Vd=[1,48],$Ve=[1,44],$Vf=[1,45],$Vg=[1,46],$Vh=[1,47],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[61,62],$Vm=[6,24,27,62,65,67,68],$Vn=[1,58],$Vo=[27,61,62],$Vp=[6,13,22,55,61,62,64,73,75,76],$Vq=[1,63],$Vr=[1,69],$Vs=[1,82],$Vt=[2,60],$Vu=[1,85],$Vv=[1,86],$Vw=[2,87],$Vx=[1,93],$Vy=[1,94],$Vz=[61,62,73],$VA=[2,95],$VB=[1,131],$VC=[1,132],$VD=[6,13,22,52,55,61,62,64,73,75,76],$VE=[62,73];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"modules":3,"EOF":4,"module":5,"IDENTIFIER":6,"DEFINITIONS":7,"AUTOMATIC":8,"TAGS":9,"::=":10,"BEGIN":11,"expressions":12,"END":13,"expression":14,"definition":15,"assignment":16,"import":17,"type":18,"nameList":19,"INTEGER":20,"NUMERIC":21,"IMPORTS":22,"importList":23,";":24,"importMember":25,"nameMembers":26,"FROM":27,"builtinType":28,"withComponentsExpression":29,"bitString":30,"boolean":31,"choice":32,"enumerated":33,"integer":34,"null":35,"octetString":36,"sequence":37,"sequenceOf":38,"BIT_STRING":39,"sizeExpression":40,"BOOLEAN":41,"CHOICE":42,"nameTypeList":43,"ENUMERATED":44,"rangeExpression":45,"constExpression":46,"NULL":47,"OCTET_STRING":48,"containingExpression":49,"SEQUENCE":50,"nameTypeOptionalList":51,"OF":52,"(":53,"SIZE":54,")":55,"..":56,"NUMBER":57,"CONTAINING":58,"{":59,"nameTypeMembers":60,"}":61,",":62,"nameTypeMember":63,"COND":64,"...":65,"nameMember":66,"true":67,"false":68,"nameTypeOptionalMembers":69,"nameTypeOptionalMember":70,"[[":71,"nameTypeOptionalExtensionAdditionGroupMembers":72,"]]":73,"NEED_CODE":74,"OPTIONAL":75,"DEFAULT":76,"BIT_STRING_EXPRESSION":77,"WITH":78,"COMPONENTS":79,"namePresentAbsentList":80,"namePresentAbsentMembers":81,"namePresentAbsentMember":82,"PRESENT":83,"ABSENT":84,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",6:"IDENTIFIER",7:"DEFINITIONS",8:"AUTOMATIC",9:"TAGS",10:"::=",11:"BEGIN",13:"END",20:"INTEGER",21:"NUMERIC",22:"IMPORTS",24:";",27:"FROM",39:"BIT_STRING",41:"BOOLEAN",42:"CHOICE",44:"ENUMERATED",47:"NULL",48:"OCTET_STRING",50:"SEQUENCE",52:"OF",53:"(",54:"SIZE",55:")",56:"..",57:"NUMBER",58:"CONTAINING",59:"{",61:"}",62:",",64:"COND",65:"...",67:"true",68:"false",71:"[[",73:"]]",74:"NEED_CODE",75:"OPTIONAL",76:"DEFAULT",77:"BIT_STRING_EXPRESSION",78:"WITH",79:"COMPONENTS",83:"PRESENT",84:"ABSENT"},
productions_: [0,[3,2],[3,2],[3,1],[5,8],[12,2],[12,1],[14,1],[14,1],[14,1],[15,3],[15,4],[16,4],[17,3],[23,2],[23,1],[25,3],[18,1],[18,2],[18,2],[18,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,2],[30,1],[31,1],[32,2],[33,2],[34,2],[34,2],[34,1],[35,1],[36,1],[36,2],[36,2],[37,2],[38,4],[40,4],[40,4],[46,3],[46,3],[45,5],[45,5],[45,5],[45,5],[49,4],[43,3],[60,3],[60,5],[60,1],[63,2],[63,4],[63,1],[63,0],[19,3],[26,3],[26,1],[66,1],[66,1],[66,1],[66,1],[66,0],[51,3],[69,3],[69,5],[69,4],[69,5],[69,1],[72,3],[72,4],[72,5],[72,1],[70,2],[70,3],[70,4],[70,5],[70,4],[70,4],[70,4],[70,1],[70,0],[29,5],[80,3],[81,3],[81,1],[82,2],[82,2],[82,1],[82,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 5: case 14:
this.$ = Object.assign($$[$0-1], $$[$0]);
break;
case 3: case 6: case 8: case 15: case 17: case 29: case 67:
this.$ = $$[$0];
break;
case 4:
var obj = {}; obj[$$[$0-7]] = $$[$0-1]; this.$ = obj;
break;
case 9:
this.$ = {import: $$[$0]};
break;
case 10:
var obj = {}; obj[$$[$0-2]] = $$[$0]; this.$ = obj;
break;
case 11:

            var obj = {};
            obj[$$[$0-3]] = Object.assign($$[$0], {parameterisedType: true, parameters: $$[$0-2]});
            for (let item of obj[$$[$0-3]]['content']) {
                if (obj[$$[$0-3]]['parameters'].includes(item['type'])) {
                    item['isParameter'] = true;
                }
            }
            for (let item of $$[$0-2]) {
                var index = obj[$$[$0-3]]['inventory'].indexOf(item);
                if (index == -1) {
                    continue;
                }
                obj[$$[$0-3]]['inventory'].splice(index, 1);
            }
            if (!obj[$$[$0-3]]['inventory'].length) {
                delete obj[$$[$0-3]]['inventory'];
            }
        this.$ = obj;
        
break;
case 12:
var obj = {}; obj[$$[$0-3]] = {type: $$[$0-2], value: Number($$[$0])}; this.$ = obj;
break;
case 13: case 47: case 53: case 61: case 69: case 88: case 89:
this.$ = $$[$0-1];
break;
case 16:
var obj = {}; obj[$$[$0]] = $$[$0-2]; this.$ = obj
break;
case 18:
this.$ = {type: $$[$0-1], parameters: $$[$0],
               inventory: Array.prototype.concat($$[$0-1], $$[$0])};
break;
case 19:
this.$ = {type: $$[$0-1], withComponents: $$[$0]};
break;
case 20:
this.$ = {type: $$[$0], inventory: [$$[$0]]};
break;
case 30: case 40: case 41:
this.$ = Object.assign({type: $$[$0-1]}, $$[$0]);
break;
case 31: case 32: case 37: case 38: case 39:
this.$ = {type: $$[$0]};
break;
case 33:

            var inventory = $$[$0].reduce(function(accum, curr, currIndex, array) {
                if ('inventory' in curr) {
                    for (let item of curr['inventory']) {
                        if (!accum.includes(item)) {
                            accum = accum.concat(item);
                        }
                    }
                    delete curr['inventory'];
                }
                return accum;
            }, []);
            var obj = {type: $$[$0-1], content: $$[$0]};
            if (inventory.length) {
                Object.assign(obj, {inventory: inventory});
            }
            this.$ = obj;
        
break;
case 34:
this.$ = {type: $$[$0-1], content: $$[$0]};
break;
case 35:

            var obj = Object.assign({type: $$[$0-1]}, $$[$0]);
            if ('inventory' in $$[$0]) {
                var inventory = $$[$0]['inventory'];
                delete $$[$0]['inventory'];
                Object.assign(obj, {inventory: inventory});
            }
            this.$ = obj;
        
break;
case 36:
this.$ = {type: $$[$0-1], value: $$[$0]};
break;
case 42:

            var inventory = $$[$0].reduce(function(accum, curr, currIndex, array) {
                if ('inventory' in curr) {
                    for (let item of curr['inventory']) {
                        if (!accum.includes(item)) {
                            accum = accum.concat(item);
                        }
                    }
                    delete curr['inventory'];
                }
                return accum;
            }, []);
            var obj = {type: $$[$0-1], content: $$[$0]};
            if (inventory.length) {
                Object.assign(obj, {inventory: inventory});
            }
            this.$ = obj;
         
break;
case 43:

            var builtins = ['BIT STRING' ,'BOOLEAN', 'CHOICE' ,'CONTAINING',
            'ENUMERATED', 'INTEGER', 'OCTET STRING', 'SEQUENCE'];
            var obj = Object.assign({type: $$[$0-3] + ' ' + $$[$0-1], member: $$[$0]}, $$[$0-2]);
            if ('inventory' in obj['member']) {
                for (let item of obj['member']['inventory']) {
                    if (builtins.includes(item)) {
                        continue;
                    }
                    if (!('inventory' in obj)) {
                        obj['inventory'] = [item];
                    } else {
                        if (!obj['inventory'].includes(item)) {
                            obj['inventory'] = obj['inventory'].concat(item);
                        }
                    }
                }
                delete obj['member']['inventory'];
            }
            this.$ = obj;
        
break;
case 44:

            var obj = {sizeMin: $$[$0-1].start, sizeMax: $$[$0-1].end};
            if ('inventory' in $$[$0-1]) {
                Object.assign(obj, {inventory: $$[$0-1]['inventory']});
            }
            this.$ = obj;
        
break;
case 45:

            var obj = {size: ($$[$0-1] == Number($$[$0-1]) ? Number($$[$0-1]) : $$[$0-1])};
            if (typeof $$[$0-1] == 'string') {
                var inventory = $$[$0-1];
                var index = inventory.lastIndexOf('-');
                if (inventory.substring(index) == Number(inventory.substring(index))) {
                    inventory = inventory.substring(0, index);
                }
                Object.assign(obj, {inventory: [inventory]});
            }
            this.$ = obj;
        
break;
case 46:
this.$ = Number($$[$0-1]);
break;
case 48:
this.$ = {start: Number($$[$0-3]), end: Number($$[$0-1])};
break;
case 49:

            var obj = {start: Number($$[$0-3]), end: $$[$0-1]};
            var inventory = $$[$0-1];
            var index = inventory.lastIndexOf('-');
            if (inventory.substring(index) == Number(inventory.substring(index))) {
                inventory = inventory.substring(0, index);
            }
            this.$ = Object.assign(obj, {inventory: [inventory]});
        
break;
case 50:

            var obj = {start: $$[$0-3], end: Number($$[$0-1])};
            var inventory = $$[$0-3];
            var index = inventory.lastIndexOf('-');
            if (inventory.substring(index) == Number(inventory.substring(index))) {
                inventory = inventory.substring(0, index);
            }
            this.$ = Object.assign(obj, {inventory: [inventory]});
        
break;
case 51:

            var obj = {start: $$[$0-3], end: $$[$0-1]};
            var inventory = [$$[$0-3], $$[$0-1]];
            for (let i in inventory) {
                var index = inventory[i].lastIndexOf('-');
                if (inventory[i].substring(index) == Number(inventory[i].substring(index))) {
                    inventory[i] = inventory[i].substring(0, index);
                }
            }
            this.$ = Object.assign(obj, {inventory: inventory});
        
break;
case 52:
this.$ = {containing: $$[$0-1]['type'], inventory: [$$[$0-1]['type']]};
break;
case 54: case 62: case 70: case 75: case 90:
this.$ = Array.prototype.concat($$[$0-2], $$[$0]);
break;
case 55: case 73: case 77:
Object.assign($$[$0-4][$$[$0-4].length - 1], {condition: $$[$0-1]});
         this.$ = Array.prototype.concat($$[$0-4], $$[$0]);
break;
case 56: case 63: case 74: case 78: case 91:
this.$ = Array.prototype.concat([], $$[$0]);
break;
case 57: case 79:
this.$ = Object.assign({name: $$[$0-1]}, $$[$0]);
break;
case 58:
this.$ = Object.assign({name: $$[$0-3], condition: $$[$0]}, $$[$0-2]);
break;
case 59: case 86: case 94:
this.$ = {name: $$[$0]};
break;
case 60: case 68: case 87: case 95:
this.$ = [];
break;
case 71:

            var inventory = $$[$0-1].reduce(function(accum, curr, currIndex, array) {
                if ('inventory' in curr) {
                    for (let item of curr['inventory']) {
                        if (!accum.includes(item)) {
                            accum = accum.concat(item);
                        }
                    }
                    delete curr['inventory'];
                }
                return accum;
            }, []);
            var obj = {};
            Object.assign(obj, {extensionAdditionGroup: $$[$0-1]}, {inventory: inventory});
            this.$ = Array.prototype.concat($$[$0-4], obj);
        
break;
case 72: case 76:
Object.assign($$[$0-3][$$[$0-3].length - 1], {needCode: $$[$0-1]});
         this.$ = Array.prototype.concat($$[$0-3], $$[$0]);
break;
case 80:
this.$ = Object.assign({name: $$[$0-2],optional: true}, $$[$0-1]);
break;
case 81:
this.$ = Object.assign({name: $$[$0-3], optional: true, needCode: $$[$0]}, $$[$0-2]);
break;
case 82:
this.$ = Object.assign({name: $$[$0-4], optional: true, condition: $$[$0]}, $$[$0-3]);
break;
case 83: case 84:
this.$ = Object.assign({name: $$[$0-3], default: $$[$0]}, $$[$0-2]);
break;
case 85:
this.$ = Object.assign({name: $$[$0-3], default: Number($$[$0])}, $$[$0-2]);
break;
case 92:
this.$ = Object.assign({name: $$[$0-1]}, {present: true});
break;
case 93:
this.$ = Object.assign({name: $$[$0-1]}, {absent: true});
break;
}
},
table: [{3:1,5:2,6:$V0},{1:[3],4:[1,4],5:5,6:$V0},o($V1,[2,3]),{7:[1,6]},o($V1,[2,1]),o($V1,[2,2]),{8:[1,7]},{9:[1,8]},{10:[1,9]},{11:[1,10]},{6:$V2,12:11,14:12,15:13,16:14,17:15,22:$V3},{6:$V2,13:[1,18],14:19,15:13,16:14,17:15,22:$V3},o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),o($V4,[2,9]),{10:[1,20],19:21,20:[1,22],59:$V5},o($V6,$V7,{23:24,25:25,26:26,66:27,6:$V8,65:$V9,67:$Va,68:$Vb}),o($V1,[2,4]),o($V4,[2,5]),{6:$Vc,18:32,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},{10:[1,52]},{10:[1,53]},o($Vl,$V7,{66:27,26:54,6:$V8,65:$V9,67:$Va,68:$Vb}),o($V6,$V7,{26:26,66:27,25:56,6:$V8,24:[1,55],65:$V9,67:$Va,68:$Vb}),o($Vm,[2,15]),{27:[1,57],62:$Vn},o($Vo,[2,63]),o($Vo,[2,64]),o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,67]),o($V4,[2,10]),o($Vp,[2,17]),o($Vp,[2,20],{19:59,29:60,53:[1,61],59:$V5}),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,31],{40:62,53:$Vq}),o($Vp,[2,32]),{43:64,59:[1,65]},{19:66,59:$V5},o($Vp,[2,37],{45:67,46:68,53:$Vr}),o($Vp,[2,38]),o($Vp,[2,39],{49:70,40:71,53:[1,72]}),{40:74,51:73,53:$Vq,59:[1,75]},{6:$Vc,18:76,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},{21:[1,77]},{61:[1,78],62:$Vn},o($V4,[2,13]),o($Vm,[2,14]),{6:[1,79]},o($Vo,$V7,{66:80,6:$V8,65:$V9,67:$Va,68:$Vb}),o($Vp,[2,18]),o($Vp,[2,19]),{78:[1,81]},o($Vp,[2,30]),{54:$Vs},o($Vp,[2,33]),o($Vl,$Vt,{60:83,63:84,6:$Vu,65:$Vv}),o($Vp,[2,34]),o($Vp,[2,35]),o($Vp,[2,36]),{6:[1,88],21:[1,87]},o($Vp,[2,40]),o($Vp,[2,41]),{54:$Vs,58:[1,89]},o($Vp,[2,42]),{52:[1,90]},o($Vl,$Vw,{69:91,70:92,6:$Vx,65:$Vy}),o($V4,[2,11]),o($V4,[2,12]),o([6,10,13,22,55,61,62,64,73,75,76],[2,61]),o($Vm,[2,16]),o($Vo,[2,62]),{79:[1,95]},{45:96,46:97,53:$Vr},{61:[1,98],62:[1,99]},o($Vl,[2,56]),{6:$Vc,18:100,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},o($Vl,[2,59]),{55:[1,102],56:[1,101]},{55:[1,104],56:[1,103]},{6:$Vc,18:105,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},{6:$Vc,18:106,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},{61:[1,107],62:[1,108]},o($Vl,[2,74]),{6:$Vc,18:109,20:$Vd,28:33,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:$Ve,41:$Vf,42:$Vg,44:$Vh,47:$Vi,48:$Vj,50:$Vk},o($Vz,[2,86]),{59:[1,111],80:110},{55:[1,112]},{55:[1,113]},o($Vp,[2,53]),o($Vl,$Vt,{63:114,6:$Vu,64:[1,115],65:$Vv}),o($Vl,[2,57],{64:[1,116]}),{6:[1,118],21:[1,117]},o($Vp,[2,46]),{6:[1,120],57:[1,119]},o($Vp,[2,47]),{55:[1,121]},o($Vp,[2,43]),o($Vp,[2,69]),o($Vl,$Vw,{70:122,6:$Vx,64:[1,125],65:$Vy,71:[1,123],74:[1,124]}),o($Vz,[2,79],{75:[1,126],76:[1,127]}),{55:[1,128]},o($Vl,$VA,{81:129,82:130,6:$VB,65:$VC}),o($VD,[2,44]),o($VD,[2,45]),o($Vl,[2,54]),{6:[1,133]},{6:[1,134]},{55:[1,135]},{55:[1,136]},{55:[1,137]},{55:[1,138]},o($Vp,[2,52]),o($Vl,[2,70]),o($VE,$Vw,{72:139,70:140,6:$Vx,65:$Vy}),o($Vl,$Vw,{70:141,6:$Vx,65:$Vy}),{6:[1,142]},o($Vz,[2,80],{64:[1,144],74:[1,143]}),{6:[1,145],21:[1,147],77:[1,146]},o($Vp,[2,88]),{61:[1,148],62:[1,149]},o($Vl,[2,91]),{83:[1,150],84:[1,151]},o($Vl,[2,94]),o($Vl,$Vt,{63:152,6:$Vu,65:$Vv}),o($Vl,[2,58]),o($Vp,[2,48]),o($Vp,[2,49]),o($Vp,[2,50]),o($Vp,[2,51]),{62:[1,154],73:[1,153]},o($VE,[2,78]),o($Vl,[2,72]),o($Vl,$Vw,{70:155,6:$Vx,65:$Vy}),o($Vz,[2,81]),{6:[1,156]},o($Vz,[2,83]),o($Vz,[2,84]),o($Vz,[2,85]),{55:[2,89]},o($Vl,$VA,{82:157,6:$VB,65:$VC}),o($Vl,[2,92]),o($Vl,[2,93]),o($Vl,[2,55]),o($Vl,[2,71]),o($VE,$Vw,{70:158,6:$Vx,64:[1,160],65:$Vy,74:[1,159]}),o($Vl,[2,73]),o($Vz,[2,82]),o($Vl,[2,90]),o($VE,[2,75]),o($VE,$Vw,{70:161,6:$Vx,65:$Vy}),{6:[1,162]},o($VE,[2,76]),o($VE,$Vw,{70:163,6:$Vx,65:$Vy}),o($VE,[2,77])],
defaultActions: {148:[2,89]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('INITIAL');
break;
case 1:/* skip whitespace */
break;
case 2:return 74
break;
case 3:return 64
break;
case 4:/* skip comment */
break;
case 5:return 84
break;
case 6:return 8
break;
case 7:return 11
break;
case 8:return 39
break;
case 9:return 41
break;
case 10:return 42
break;
case 11:return 79
break;
case 12:return 58
break;
case 13:return 76
break;
case 14:return 7
break;
case 15:return 13
break;
case 16:return 44
break;
case 17:return 27
break;
case 18:return 68
break;
case 19:return 22
break;
case 20:return 20
break;
case 21:return 48
break;
case 22:return 52
break;
case 23:this.begin('TRAILING'); return 75
break;
case 24:return 83
break;
case 25:return 50
break;
case 26:return 54
break;
case 27:return 9
break;
case 28:return 67
break;
case 29:return 78
break;
case 30:return 62
break;
case 31:return 47
break;
case 32:return 77
break;
case 33:this.begin('TRAILING'); return 6
break;
case 34:return 21
break;
case 35:return 65
break;
case 36:return 56
break;
case 37:return 24
break;
case 38:return 10
break;
case 39:return 53
break;
case 40:return 55
break;
case 41:return 71
break;
case 42:return 73
break;
case 43:return 59
break;
case 44:this.begin('TRAILING'); return 61
break;
case 45:return 4
break;
case 46:return 'INVALID'
break;
}
},
rules: [/^(?:\n)/,/^(?:\s)/,/^(?:-- Need \w+)/,/^(?:-- Cond\b)/,/^(?:--.*)/,/^(?:ABSENT\b)/,/^(?:AUTOMATIC\b)/,/^(?:BEGIN\b)/,/^(?:BIT STRING\b)/,/^(?:BOOLEAN\b)/,/^(?:CHOICE\b)/,/^(?:COMPONENTS\b)/,/^(?:CONTAINING\b)/,/^(?:DEFAULT\b)/,/^(?:DEFINITIONS\b)/,/^(?:END\b)/,/^(?:ENUMERATED\b)/,/^(?:FROM\b)/,/^(?:false\b)/,/^(?:IMPORTS\b)/,/^(?:INTEGER\b)/,/^(?:OCTET STRING\b)/,/^(?:OF\b)/,/^(?:OPTIONAL\b)/,/^(?:PRESENT\b)/,/^(?:SEQUENCE\b)/,/^(?:SIZE\b)/,/^(?:TAGS\b)/,/^(?:true\b)/,/^(?:WITH\b)/,/^(?:,)/,/^(?:NULL\b)/,/^(?:'.*'B\b)/,/^(?:[a-zA-Z](-?\w*)*)/,/^(?:-?\d+)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:;)/,/^(?:::=)/,/^(?:\()/,/^(?:\))/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:.)/],
conditions: {"TRAILING":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = asn1;
exports.Parser = asn1.Parser;
exports.parse = function () { return asn1.parse.apply(asn1, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}